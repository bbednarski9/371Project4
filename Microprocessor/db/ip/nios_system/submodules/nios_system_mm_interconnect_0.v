// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2016.02.22.18:37:16

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                             //                         clk_0_clk.clk
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,   // cpu_reset_n_reset_bridge_in_reset.reset
		input  wire [13:0] cpu_data_master_address,                   //                   cpu_data_master.address
		output wire        cpu_data_master_waitrequest,               //                                  .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                //                                  .byteenable
		input  wire        cpu_data_master_read,                      //                                  .read
		output wire [31:0] cpu_data_master_readdata,                  //                                  .readdata
		input  wire        cpu_data_master_write,                     //                                  .write
		input  wire [31:0] cpu_data_master_writedata,                 //                                  .writedata
		input  wire        cpu_data_master_debugaccess,               //                                  .debugaccess
		input  wire [13:0] cpu_instruction_master_address,            //            cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,        //                                  .waitrequest
		input  wire        cpu_instruction_master_read,               //                                  .read
		output wire [31:0] cpu_instruction_master_readdata,           //                                  .readdata
		output wire [1:0]  CharacterReceived_s1_address,              //              CharacterReceived_s1.address
		input  wire [31:0] CharacterReceived_s1_readdata,             //                                  .readdata
		output wire [1:0]  CharacterSent_s1_address,                  //                  CharacterSent_s1.address
		output wire        CharacterSent_s1_write,                    //                                  .write
		input  wire [31:0] CharacterSent_s1_readdata,                 //                                  .readdata
		output wire [31:0] CharacterSent_s1_writedata,                //                                  .writedata
		output wire        CharacterSent_s1_chipselect,               //                                  .chipselect
		output wire [8:0]  cpu_jtag_debug_module_address,             //             cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,               //                                  .write
		output wire        cpu_jtag_debug_module_read,                //                                  .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,            //                                  .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,           //                                  .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,          //                                  .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,         //                                  .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,         //                                  .debugaccess
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,     //     jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,       //                                  .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,        //                                  .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,    //                                  .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,   //                                  .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest, //                                  .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,  //                                  .chipselect
		output wire [1:0]  LEDR_s1_address,                           //                           LEDR_s1.address
		output wire        LEDR_s1_write,                             //                                  .write
		input  wire [31:0] LEDR_s1_readdata,                          //                                  .readdata
		output wire [31:0] LEDR_s1_writedata,                         //                                  .writedata
		output wire        LEDR_s1_chipselect,                        //                                  .chipselect
		output wire [1:0]  Load_s1_address,                           //                           Load_s1.address
		output wire        Load_s1_write,                             //                                  .write
		input  wire [31:0] Load_s1_readdata,                          //                                  .readdata
		output wire [31:0] Load_s1_writedata,                         //                                  .writedata
		output wire        Load_s1_chipselect,                        //                                  .chipselect
		output wire [9:0]  onchip_memory2_0_s1_address,               //               onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                 //                                  .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,              //                                  .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,             //                                  .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,            //                                  .byteenable
		output wire        onchip_memory2_0_s1_chipselect,            //                                  .chipselect
		output wire        onchip_memory2_0_s1_clken,                 //                                  .clken
		output wire [1:0]  ParallelFromProcessor_s1_address,          //          ParallelFromProcessor_s1.address
		output wire        ParallelFromProcessor_s1_write,            //                                  .write
		input  wire [31:0] ParallelFromProcessor_s1_readdata,         //                                  .readdata
		output wire [31:0] ParallelFromProcessor_s1_writedata,        //                                  .writedata
		output wire        ParallelFromProcessor_s1_chipselect,       //                                  .chipselect
		output wire [1:0]  ParallelToProcessor_s1_address,            //            ParallelToProcessor_s1.address
		input  wire [31:0] ParallelToProcessor_s1_readdata,           //                                  .readdata
		output wire [1:0]  TransmitEnable_s1_address,                 //                 TransmitEnable_s1.address
		output wire        TransmitEnable_s1_write,                   //                                  .write
		input  wire [31:0] TransmitEnable_s1_readdata,                //                                  .readdata
		output wire [31:0] TransmitEnable_s1_writedata,               //                                  .writedata
		output wire        TransmitEnable_s1_chipselect               //                                  .chipselect
	);

	wire         cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire  [13:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire         cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire         cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire         cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire         cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire         cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire         rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire         rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> cpu_instruction_master_agent:rp_valid
	wire         rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire  [91:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> cpu_instruction_master_agent:rp_data
	wire   [9:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> cpu_instruction_master_agent:rp_channel
	wire         rsp_mux_src_ready;                                                         // cpu_instruction_master_agent:rp_ready -> rsp_mux:src_ready
	wire         cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire  [13:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire         cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire         cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire         cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire         cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire         cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire         rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire         rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> cpu_data_master_agent:rp_valid
	wire         rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire  [91:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> cpu_data_master_agent:rp_data
	wire   [9:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> cpu_data_master_agent:rp_channel
	wire         rsp_mux_001_src_ready;                                                     // cpu_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire         cpu_jtag_debug_module_agent_m0_waitrequest;                                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire   [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire  [13:0] cpu_jtag_debug_module_agent_m0_address;                                    // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire         cpu_jtag_debug_module_agent_m0_write;                                      // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire         cpu_jtag_debug_module_agent_m0_lock;                                       // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire         cpu_jtag_debug_module_agent_m0_read;                                       // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire  [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire         cpu_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire         cpu_jtag_debug_module_agent_m0_debugaccess;                                // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire         cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         cpu_jtag_debug_module_agent_rf_source_valid;                               // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire         cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [92:0] cpu_jtag_debug_module_agent_rf_source_data;                                // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire         cpu_jtag_debug_module_agent_rf_source_ready;                               // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [92:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire  [91:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> cpu_jtag_debug_module_agent:cp_data
	wire   [9:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_src_ready;                                                         // cpu_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                  // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                   // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                    // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire  [13:0] onchip_memory2_0_s1_agent_m0_address;                                      // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire         onchip_memory2_0_s1_agent_m0_write;                                        // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire         onchip_memory2_0_s1_agent_m0_lock;                                         // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire         onchip_memory2_0_s1_agent_m0_read;                                         // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                     // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                  // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                   // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                           // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                 // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                         // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] onchip_memory2_0_s1_agent_rf_source_data;                                  // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                 // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                        // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                              // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                      // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire  [92:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                              // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                            // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                             // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                            // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire   [9:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                     // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         ledr_s1_agent_m0_waitrequest;                                              // LEDR_s1_translator:uav_waitrequest -> LEDR_s1_agent:m0_waitrequest
	wire   [2:0] ledr_s1_agent_m0_burstcount;                                               // LEDR_s1_agent:m0_burstcount -> LEDR_s1_translator:uav_burstcount
	wire  [31:0] ledr_s1_agent_m0_writedata;                                                // LEDR_s1_agent:m0_writedata -> LEDR_s1_translator:uav_writedata
	wire  [13:0] ledr_s1_agent_m0_address;                                                  // LEDR_s1_agent:m0_address -> LEDR_s1_translator:uav_address
	wire         ledr_s1_agent_m0_write;                                                    // LEDR_s1_agent:m0_write -> LEDR_s1_translator:uav_write
	wire         ledr_s1_agent_m0_lock;                                                     // LEDR_s1_agent:m0_lock -> LEDR_s1_translator:uav_lock
	wire         ledr_s1_agent_m0_read;                                                     // LEDR_s1_agent:m0_read -> LEDR_s1_translator:uav_read
	wire  [31:0] ledr_s1_agent_m0_readdata;                                                 // LEDR_s1_translator:uav_readdata -> LEDR_s1_agent:m0_readdata
	wire         ledr_s1_agent_m0_readdatavalid;                                            // LEDR_s1_translator:uav_readdatavalid -> LEDR_s1_agent:m0_readdatavalid
	wire         ledr_s1_agent_m0_debugaccess;                                              // LEDR_s1_agent:m0_debugaccess -> LEDR_s1_translator:uav_debugaccess
	wire   [3:0] ledr_s1_agent_m0_byteenable;                                               // LEDR_s1_agent:m0_byteenable -> LEDR_s1_translator:uav_byteenable
	wire         ledr_s1_agent_rf_source_endofpacket;                                       // LEDR_s1_agent:rf_source_endofpacket -> LEDR_s1_agent_rsp_fifo:in_endofpacket
	wire         ledr_s1_agent_rf_source_valid;                                             // LEDR_s1_agent:rf_source_valid -> LEDR_s1_agent_rsp_fifo:in_valid
	wire         ledr_s1_agent_rf_source_startofpacket;                                     // LEDR_s1_agent:rf_source_startofpacket -> LEDR_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] ledr_s1_agent_rf_source_data;                                              // LEDR_s1_agent:rf_source_data -> LEDR_s1_agent_rsp_fifo:in_data
	wire         ledr_s1_agent_rf_source_ready;                                             // LEDR_s1_agent_rsp_fifo:in_ready -> LEDR_s1_agent:rf_source_ready
	wire         ledr_s1_agent_rsp_fifo_out_endofpacket;                                    // LEDR_s1_agent_rsp_fifo:out_endofpacket -> LEDR_s1_agent:rf_sink_endofpacket
	wire         ledr_s1_agent_rsp_fifo_out_valid;                                          // LEDR_s1_agent_rsp_fifo:out_valid -> LEDR_s1_agent:rf_sink_valid
	wire         ledr_s1_agent_rsp_fifo_out_startofpacket;                                  // LEDR_s1_agent_rsp_fifo:out_startofpacket -> LEDR_s1_agent:rf_sink_startofpacket
	wire  [92:0] ledr_s1_agent_rsp_fifo_out_data;                                           // LEDR_s1_agent_rsp_fifo:out_data -> LEDR_s1_agent:rf_sink_data
	wire         ledr_s1_agent_rsp_fifo_out_ready;                                          // LEDR_s1_agent:rf_sink_ready -> LEDR_s1_agent_rsp_fifo:out_ready
	wire         ledr_s1_agent_rdata_fifo_src_valid;                                        // LEDR_s1_agent:rdata_fifo_src_valid -> LEDR_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] ledr_s1_agent_rdata_fifo_src_data;                                         // LEDR_s1_agent:rdata_fifo_src_data -> LEDR_s1_agent:rdata_fifo_sink_data
	wire         ledr_s1_agent_rdata_fifo_src_ready;                                        // LEDR_s1_agent:rdata_fifo_sink_ready -> LEDR_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> LEDR_s1_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> LEDR_s1_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> LEDR_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> LEDR_s1_agent:cp_data
	wire   [9:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> LEDR_s1_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                                     // LEDR_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                        // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire   [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire  [13:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                            // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_write;                              // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_read;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire  [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                        // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire  [92:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire  [92:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                    // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                  // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire  [91:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire   [9:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                                     // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire         paralleltoprocessor_s1_agent_m0_waitrequest;                               // ParallelToProcessor_s1_translator:uav_waitrequest -> ParallelToProcessor_s1_agent:m0_waitrequest
	wire   [2:0] paralleltoprocessor_s1_agent_m0_burstcount;                                // ParallelToProcessor_s1_agent:m0_burstcount -> ParallelToProcessor_s1_translator:uav_burstcount
	wire  [31:0] paralleltoprocessor_s1_agent_m0_writedata;                                 // ParallelToProcessor_s1_agent:m0_writedata -> ParallelToProcessor_s1_translator:uav_writedata
	wire  [13:0] paralleltoprocessor_s1_agent_m0_address;                                   // ParallelToProcessor_s1_agent:m0_address -> ParallelToProcessor_s1_translator:uav_address
	wire         paralleltoprocessor_s1_agent_m0_write;                                     // ParallelToProcessor_s1_agent:m0_write -> ParallelToProcessor_s1_translator:uav_write
	wire         paralleltoprocessor_s1_agent_m0_lock;                                      // ParallelToProcessor_s1_agent:m0_lock -> ParallelToProcessor_s1_translator:uav_lock
	wire         paralleltoprocessor_s1_agent_m0_read;                                      // ParallelToProcessor_s1_agent:m0_read -> ParallelToProcessor_s1_translator:uav_read
	wire  [31:0] paralleltoprocessor_s1_agent_m0_readdata;                                  // ParallelToProcessor_s1_translator:uav_readdata -> ParallelToProcessor_s1_agent:m0_readdata
	wire         paralleltoprocessor_s1_agent_m0_readdatavalid;                             // ParallelToProcessor_s1_translator:uav_readdatavalid -> ParallelToProcessor_s1_agent:m0_readdatavalid
	wire         paralleltoprocessor_s1_agent_m0_debugaccess;                               // ParallelToProcessor_s1_agent:m0_debugaccess -> ParallelToProcessor_s1_translator:uav_debugaccess
	wire   [3:0] paralleltoprocessor_s1_agent_m0_byteenable;                                // ParallelToProcessor_s1_agent:m0_byteenable -> ParallelToProcessor_s1_translator:uav_byteenable
	wire         paralleltoprocessor_s1_agent_rf_source_endofpacket;                        // ParallelToProcessor_s1_agent:rf_source_endofpacket -> ParallelToProcessor_s1_agent_rsp_fifo:in_endofpacket
	wire         paralleltoprocessor_s1_agent_rf_source_valid;                              // ParallelToProcessor_s1_agent:rf_source_valid -> ParallelToProcessor_s1_agent_rsp_fifo:in_valid
	wire         paralleltoprocessor_s1_agent_rf_source_startofpacket;                      // ParallelToProcessor_s1_agent:rf_source_startofpacket -> ParallelToProcessor_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] paralleltoprocessor_s1_agent_rf_source_data;                               // ParallelToProcessor_s1_agent:rf_source_data -> ParallelToProcessor_s1_agent_rsp_fifo:in_data
	wire         paralleltoprocessor_s1_agent_rf_source_ready;                              // ParallelToProcessor_s1_agent_rsp_fifo:in_ready -> ParallelToProcessor_s1_agent:rf_source_ready
	wire         paralleltoprocessor_s1_agent_rsp_fifo_out_endofpacket;                     // ParallelToProcessor_s1_agent_rsp_fifo:out_endofpacket -> ParallelToProcessor_s1_agent:rf_sink_endofpacket
	wire         paralleltoprocessor_s1_agent_rsp_fifo_out_valid;                           // ParallelToProcessor_s1_agent_rsp_fifo:out_valid -> ParallelToProcessor_s1_agent:rf_sink_valid
	wire         paralleltoprocessor_s1_agent_rsp_fifo_out_startofpacket;                   // ParallelToProcessor_s1_agent_rsp_fifo:out_startofpacket -> ParallelToProcessor_s1_agent:rf_sink_startofpacket
	wire  [92:0] paralleltoprocessor_s1_agent_rsp_fifo_out_data;                            // ParallelToProcessor_s1_agent_rsp_fifo:out_data -> ParallelToProcessor_s1_agent:rf_sink_data
	wire         paralleltoprocessor_s1_agent_rsp_fifo_out_ready;                           // ParallelToProcessor_s1_agent:rf_sink_ready -> ParallelToProcessor_s1_agent_rsp_fifo:out_ready
	wire         paralleltoprocessor_s1_agent_rdata_fifo_src_valid;                         // ParallelToProcessor_s1_agent:rdata_fifo_src_valid -> ParallelToProcessor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] paralleltoprocessor_s1_agent_rdata_fifo_src_data;                          // ParallelToProcessor_s1_agent:rdata_fifo_src_data -> ParallelToProcessor_s1_agent:rdata_fifo_sink_data
	wire         paralleltoprocessor_s1_agent_rdata_fifo_src_ready;                         // ParallelToProcessor_s1_agent:rdata_fifo_sink_ready -> ParallelToProcessor_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> ParallelToProcessor_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> ParallelToProcessor_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> ParallelToProcessor_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> ParallelToProcessor_s1_agent:cp_data
	wire   [9:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> ParallelToProcessor_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                     // ParallelToProcessor_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         parallelfromprocessor_s1_agent_m0_waitrequest;                             // ParallelFromProcessor_s1_translator:uav_waitrequest -> ParallelFromProcessor_s1_agent:m0_waitrequest
	wire   [2:0] parallelfromprocessor_s1_agent_m0_burstcount;                              // ParallelFromProcessor_s1_agent:m0_burstcount -> ParallelFromProcessor_s1_translator:uav_burstcount
	wire  [31:0] parallelfromprocessor_s1_agent_m0_writedata;                               // ParallelFromProcessor_s1_agent:m0_writedata -> ParallelFromProcessor_s1_translator:uav_writedata
	wire  [13:0] parallelfromprocessor_s1_agent_m0_address;                                 // ParallelFromProcessor_s1_agent:m0_address -> ParallelFromProcessor_s1_translator:uav_address
	wire         parallelfromprocessor_s1_agent_m0_write;                                   // ParallelFromProcessor_s1_agent:m0_write -> ParallelFromProcessor_s1_translator:uav_write
	wire         parallelfromprocessor_s1_agent_m0_lock;                                    // ParallelFromProcessor_s1_agent:m0_lock -> ParallelFromProcessor_s1_translator:uav_lock
	wire         parallelfromprocessor_s1_agent_m0_read;                                    // ParallelFromProcessor_s1_agent:m0_read -> ParallelFromProcessor_s1_translator:uav_read
	wire  [31:0] parallelfromprocessor_s1_agent_m0_readdata;                                // ParallelFromProcessor_s1_translator:uav_readdata -> ParallelFromProcessor_s1_agent:m0_readdata
	wire         parallelfromprocessor_s1_agent_m0_readdatavalid;                           // ParallelFromProcessor_s1_translator:uav_readdatavalid -> ParallelFromProcessor_s1_agent:m0_readdatavalid
	wire         parallelfromprocessor_s1_agent_m0_debugaccess;                             // ParallelFromProcessor_s1_agent:m0_debugaccess -> ParallelFromProcessor_s1_translator:uav_debugaccess
	wire   [3:0] parallelfromprocessor_s1_agent_m0_byteenable;                              // ParallelFromProcessor_s1_agent:m0_byteenable -> ParallelFromProcessor_s1_translator:uav_byteenable
	wire         parallelfromprocessor_s1_agent_rf_source_endofpacket;                      // ParallelFromProcessor_s1_agent:rf_source_endofpacket -> ParallelFromProcessor_s1_agent_rsp_fifo:in_endofpacket
	wire         parallelfromprocessor_s1_agent_rf_source_valid;                            // ParallelFromProcessor_s1_agent:rf_source_valid -> ParallelFromProcessor_s1_agent_rsp_fifo:in_valid
	wire         parallelfromprocessor_s1_agent_rf_source_startofpacket;                    // ParallelFromProcessor_s1_agent:rf_source_startofpacket -> ParallelFromProcessor_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] parallelfromprocessor_s1_agent_rf_source_data;                             // ParallelFromProcessor_s1_agent:rf_source_data -> ParallelFromProcessor_s1_agent_rsp_fifo:in_data
	wire         parallelfromprocessor_s1_agent_rf_source_ready;                            // ParallelFromProcessor_s1_agent_rsp_fifo:in_ready -> ParallelFromProcessor_s1_agent:rf_source_ready
	wire         parallelfromprocessor_s1_agent_rsp_fifo_out_endofpacket;                   // ParallelFromProcessor_s1_agent_rsp_fifo:out_endofpacket -> ParallelFromProcessor_s1_agent:rf_sink_endofpacket
	wire         parallelfromprocessor_s1_agent_rsp_fifo_out_valid;                         // ParallelFromProcessor_s1_agent_rsp_fifo:out_valid -> ParallelFromProcessor_s1_agent:rf_sink_valid
	wire         parallelfromprocessor_s1_agent_rsp_fifo_out_startofpacket;                 // ParallelFromProcessor_s1_agent_rsp_fifo:out_startofpacket -> ParallelFromProcessor_s1_agent:rf_sink_startofpacket
	wire  [92:0] parallelfromprocessor_s1_agent_rsp_fifo_out_data;                          // ParallelFromProcessor_s1_agent_rsp_fifo:out_data -> ParallelFromProcessor_s1_agent:rf_sink_data
	wire         parallelfromprocessor_s1_agent_rsp_fifo_out_ready;                         // ParallelFromProcessor_s1_agent:rf_sink_ready -> ParallelFromProcessor_s1_agent_rsp_fifo:out_ready
	wire         parallelfromprocessor_s1_agent_rdata_fifo_src_valid;                       // ParallelFromProcessor_s1_agent:rdata_fifo_src_valid -> ParallelFromProcessor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] parallelfromprocessor_s1_agent_rdata_fifo_src_data;                        // ParallelFromProcessor_s1_agent:rdata_fifo_src_data -> ParallelFromProcessor_s1_agent:rdata_fifo_sink_data
	wire         parallelfromprocessor_s1_agent_rdata_fifo_src_ready;                       // ParallelFromProcessor_s1_agent:rdata_fifo_sink_ready -> ParallelFromProcessor_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> ParallelFromProcessor_s1_agent:cp_endofpacket
	wire         cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> ParallelFromProcessor_s1_agent:cp_valid
	wire         cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> ParallelFromProcessor_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> ParallelFromProcessor_s1_agent:cp_data
	wire   [9:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> ParallelFromProcessor_s1_agent:cp_channel
	wire         cmd_mux_005_src_ready;                                                     // ParallelFromProcessor_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire         transmitenable_s1_agent_m0_waitrequest;                                    // TransmitEnable_s1_translator:uav_waitrequest -> TransmitEnable_s1_agent:m0_waitrequest
	wire   [2:0] transmitenable_s1_agent_m0_burstcount;                                     // TransmitEnable_s1_agent:m0_burstcount -> TransmitEnable_s1_translator:uav_burstcount
	wire  [31:0] transmitenable_s1_agent_m0_writedata;                                      // TransmitEnable_s1_agent:m0_writedata -> TransmitEnable_s1_translator:uav_writedata
	wire  [13:0] transmitenable_s1_agent_m0_address;                                        // TransmitEnable_s1_agent:m0_address -> TransmitEnable_s1_translator:uav_address
	wire         transmitenable_s1_agent_m0_write;                                          // TransmitEnable_s1_agent:m0_write -> TransmitEnable_s1_translator:uav_write
	wire         transmitenable_s1_agent_m0_lock;                                           // TransmitEnable_s1_agent:m0_lock -> TransmitEnable_s1_translator:uav_lock
	wire         transmitenable_s1_agent_m0_read;                                           // TransmitEnable_s1_agent:m0_read -> TransmitEnable_s1_translator:uav_read
	wire  [31:0] transmitenable_s1_agent_m0_readdata;                                       // TransmitEnable_s1_translator:uav_readdata -> TransmitEnable_s1_agent:m0_readdata
	wire         transmitenable_s1_agent_m0_readdatavalid;                                  // TransmitEnable_s1_translator:uav_readdatavalid -> TransmitEnable_s1_agent:m0_readdatavalid
	wire         transmitenable_s1_agent_m0_debugaccess;                                    // TransmitEnable_s1_agent:m0_debugaccess -> TransmitEnable_s1_translator:uav_debugaccess
	wire   [3:0] transmitenable_s1_agent_m0_byteenable;                                     // TransmitEnable_s1_agent:m0_byteenable -> TransmitEnable_s1_translator:uav_byteenable
	wire         transmitenable_s1_agent_rf_source_endofpacket;                             // TransmitEnable_s1_agent:rf_source_endofpacket -> TransmitEnable_s1_agent_rsp_fifo:in_endofpacket
	wire         transmitenable_s1_agent_rf_source_valid;                                   // TransmitEnable_s1_agent:rf_source_valid -> TransmitEnable_s1_agent_rsp_fifo:in_valid
	wire         transmitenable_s1_agent_rf_source_startofpacket;                           // TransmitEnable_s1_agent:rf_source_startofpacket -> TransmitEnable_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] transmitenable_s1_agent_rf_source_data;                                    // TransmitEnable_s1_agent:rf_source_data -> TransmitEnable_s1_agent_rsp_fifo:in_data
	wire         transmitenable_s1_agent_rf_source_ready;                                   // TransmitEnable_s1_agent_rsp_fifo:in_ready -> TransmitEnable_s1_agent:rf_source_ready
	wire         transmitenable_s1_agent_rsp_fifo_out_endofpacket;                          // TransmitEnable_s1_agent_rsp_fifo:out_endofpacket -> TransmitEnable_s1_agent:rf_sink_endofpacket
	wire         transmitenable_s1_agent_rsp_fifo_out_valid;                                // TransmitEnable_s1_agent_rsp_fifo:out_valid -> TransmitEnable_s1_agent:rf_sink_valid
	wire         transmitenable_s1_agent_rsp_fifo_out_startofpacket;                        // TransmitEnable_s1_agent_rsp_fifo:out_startofpacket -> TransmitEnable_s1_agent:rf_sink_startofpacket
	wire  [92:0] transmitenable_s1_agent_rsp_fifo_out_data;                                 // TransmitEnable_s1_agent_rsp_fifo:out_data -> TransmitEnable_s1_agent:rf_sink_data
	wire         transmitenable_s1_agent_rsp_fifo_out_ready;                                // TransmitEnable_s1_agent:rf_sink_ready -> TransmitEnable_s1_agent_rsp_fifo:out_ready
	wire         transmitenable_s1_agent_rdata_fifo_src_valid;                              // TransmitEnable_s1_agent:rdata_fifo_src_valid -> TransmitEnable_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] transmitenable_s1_agent_rdata_fifo_src_data;                               // TransmitEnable_s1_agent:rdata_fifo_src_data -> TransmitEnable_s1_agent:rdata_fifo_sink_data
	wire         transmitenable_s1_agent_rdata_fifo_src_ready;                              // TransmitEnable_s1_agent:rdata_fifo_sink_ready -> TransmitEnable_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> TransmitEnable_s1_agent:cp_endofpacket
	wire         cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> TransmitEnable_s1_agent:cp_valid
	wire         cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> TransmitEnable_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> TransmitEnable_s1_agent:cp_data
	wire   [9:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> TransmitEnable_s1_agent:cp_channel
	wire         cmd_mux_006_src_ready;                                                     // TransmitEnable_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire         charactersent_s1_agent_m0_waitrequest;                                     // CharacterSent_s1_translator:uav_waitrequest -> CharacterSent_s1_agent:m0_waitrequest
	wire   [2:0] charactersent_s1_agent_m0_burstcount;                                      // CharacterSent_s1_agent:m0_burstcount -> CharacterSent_s1_translator:uav_burstcount
	wire  [31:0] charactersent_s1_agent_m0_writedata;                                       // CharacterSent_s1_agent:m0_writedata -> CharacterSent_s1_translator:uav_writedata
	wire  [13:0] charactersent_s1_agent_m0_address;                                         // CharacterSent_s1_agent:m0_address -> CharacterSent_s1_translator:uav_address
	wire         charactersent_s1_agent_m0_write;                                           // CharacterSent_s1_agent:m0_write -> CharacterSent_s1_translator:uav_write
	wire         charactersent_s1_agent_m0_lock;                                            // CharacterSent_s1_agent:m0_lock -> CharacterSent_s1_translator:uav_lock
	wire         charactersent_s1_agent_m0_read;                                            // CharacterSent_s1_agent:m0_read -> CharacterSent_s1_translator:uav_read
	wire  [31:0] charactersent_s1_agent_m0_readdata;                                        // CharacterSent_s1_translator:uav_readdata -> CharacterSent_s1_agent:m0_readdata
	wire         charactersent_s1_agent_m0_readdatavalid;                                   // CharacterSent_s1_translator:uav_readdatavalid -> CharacterSent_s1_agent:m0_readdatavalid
	wire         charactersent_s1_agent_m0_debugaccess;                                     // CharacterSent_s1_agent:m0_debugaccess -> CharacterSent_s1_translator:uav_debugaccess
	wire   [3:0] charactersent_s1_agent_m0_byteenable;                                      // CharacterSent_s1_agent:m0_byteenable -> CharacterSent_s1_translator:uav_byteenable
	wire         charactersent_s1_agent_rf_source_endofpacket;                              // CharacterSent_s1_agent:rf_source_endofpacket -> CharacterSent_s1_agent_rsp_fifo:in_endofpacket
	wire         charactersent_s1_agent_rf_source_valid;                                    // CharacterSent_s1_agent:rf_source_valid -> CharacterSent_s1_agent_rsp_fifo:in_valid
	wire         charactersent_s1_agent_rf_source_startofpacket;                            // CharacterSent_s1_agent:rf_source_startofpacket -> CharacterSent_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] charactersent_s1_agent_rf_source_data;                                     // CharacterSent_s1_agent:rf_source_data -> CharacterSent_s1_agent_rsp_fifo:in_data
	wire         charactersent_s1_agent_rf_source_ready;                                    // CharacterSent_s1_agent_rsp_fifo:in_ready -> CharacterSent_s1_agent:rf_source_ready
	wire         charactersent_s1_agent_rsp_fifo_out_endofpacket;                           // CharacterSent_s1_agent_rsp_fifo:out_endofpacket -> CharacterSent_s1_agent:rf_sink_endofpacket
	wire         charactersent_s1_agent_rsp_fifo_out_valid;                                 // CharacterSent_s1_agent_rsp_fifo:out_valid -> CharacterSent_s1_agent:rf_sink_valid
	wire         charactersent_s1_agent_rsp_fifo_out_startofpacket;                         // CharacterSent_s1_agent_rsp_fifo:out_startofpacket -> CharacterSent_s1_agent:rf_sink_startofpacket
	wire  [92:0] charactersent_s1_agent_rsp_fifo_out_data;                                  // CharacterSent_s1_agent_rsp_fifo:out_data -> CharacterSent_s1_agent:rf_sink_data
	wire         charactersent_s1_agent_rsp_fifo_out_ready;                                 // CharacterSent_s1_agent:rf_sink_ready -> CharacterSent_s1_agent_rsp_fifo:out_ready
	wire         charactersent_s1_agent_rdata_fifo_src_valid;                               // CharacterSent_s1_agent:rdata_fifo_src_valid -> CharacterSent_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] charactersent_s1_agent_rdata_fifo_src_data;                                // CharacterSent_s1_agent:rdata_fifo_src_data -> CharacterSent_s1_agent:rdata_fifo_sink_data
	wire         charactersent_s1_agent_rdata_fifo_src_ready;                               // CharacterSent_s1_agent:rdata_fifo_sink_ready -> CharacterSent_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> CharacterSent_s1_agent:cp_endofpacket
	wire         cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> CharacterSent_s1_agent:cp_valid
	wire         cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> CharacterSent_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> CharacterSent_s1_agent:cp_data
	wire   [9:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> CharacterSent_s1_agent:cp_channel
	wire         cmd_mux_007_src_ready;                                                     // CharacterSent_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire         load_s1_agent_m0_waitrequest;                                              // Load_s1_translator:uav_waitrequest -> Load_s1_agent:m0_waitrequest
	wire   [2:0] load_s1_agent_m0_burstcount;                                               // Load_s1_agent:m0_burstcount -> Load_s1_translator:uav_burstcount
	wire  [31:0] load_s1_agent_m0_writedata;                                                // Load_s1_agent:m0_writedata -> Load_s1_translator:uav_writedata
	wire  [13:0] load_s1_agent_m0_address;                                                  // Load_s1_agent:m0_address -> Load_s1_translator:uav_address
	wire         load_s1_agent_m0_write;                                                    // Load_s1_agent:m0_write -> Load_s1_translator:uav_write
	wire         load_s1_agent_m0_lock;                                                     // Load_s1_agent:m0_lock -> Load_s1_translator:uav_lock
	wire         load_s1_agent_m0_read;                                                     // Load_s1_agent:m0_read -> Load_s1_translator:uav_read
	wire  [31:0] load_s1_agent_m0_readdata;                                                 // Load_s1_translator:uav_readdata -> Load_s1_agent:m0_readdata
	wire         load_s1_agent_m0_readdatavalid;                                            // Load_s1_translator:uav_readdatavalid -> Load_s1_agent:m0_readdatavalid
	wire         load_s1_agent_m0_debugaccess;                                              // Load_s1_agent:m0_debugaccess -> Load_s1_translator:uav_debugaccess
	wire   [3:0] load_s1_agent_m0_byteenable;                                               // Load_s1_agent:m0_byteenable -> Load_s1_translator:uav_byteenable
	wire         load_s1_agent_rf_source_endofpacket;                                       // Load_s1_agent:rf_source_endofpacket -> Load_s1_agent_rsp_fifo:in_endofpacket
	wire         load_s1_agent_rf_source_valid;                                             // Load_s1_agent:rf_source_valid -> Load_s1_agent_rsp_fifo:in_valid
	wire         load_s1_agent_rf_source_startofpacket;                                     // Load_s1_agent:rf_source_startofpacket -> Load_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] load_s1_agent_rf_source_data;                                              // Load_s1_agent:rf_source_data -> Load_s1_agent_rsp_fifo:in_data
	wire         load_s1_agent_rf_source_ready;                                             // Load_s1_agent_rsp_fifo:in_ready -> Load_s1_agent:rf_source_ready
	wire         load_s1_agent_rsp_fifo_out_endofpacket;                                    // Load_s1_agent_rsp_fifo:out_endofpacket -> Load_s1_agent:rf_sink_endofpacket
	wire         load_s1_agent_rsp_fifo_out_valid;                                          // Load_s1_agent_rsp_fifo:out_valid -> Load_s1_agent:rf_sink_valid
	wire         load_s1_agent_rsp_fifo_out_startofpacket;                                  // Load_s1_agent_rsp_fifo:out_startofpacket -> Load_s1_agent:rf_sink_startofpacket
	wire  [92:0] load_s1_agent_rsp_fifo_out_data;                                           // Load_s1_agent_rsp_fifo:out_data -> Load_s1_agent:rf_sink_data
	wire         load_s1_agent_rsp_fifo_out_ready;                                          // Load_s1_agent:rf_sink_ready -> Load_s1_agent_rsp_fifo:out_ready
	wire         load_s1_agent_rdata_fifo_src_valid;                                        // Load_s1_agent:rdata_fifo_src_valid -> Load_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] load_s1_agent_rdata_fifo_src_data;                                         // Load_s1_agent:rdata_fifo_src_data -> Load_s1_agent:rdata_fifo_sink_data
	wire         load_s1_agent_rdata_fifo_src_ready;                                        // Load_s1_agent:rdata_fifo_sink_ready -> Load_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> Load_s1_agent:cp_endofpacket
	wire         cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> Load_s1_agent:cp_valid
	wire         cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> Load_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> Load_s1_agent:cp_data
	wire   [9:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> Load_s1_agent:cp_channel
	wire         cmd_mux_008_src_ready;                                                     // Load_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire         characterreceived_s1_agent_m0_waitrequest;                                 // CharacterReceived_s1_translator:uav_waitrequest -> CharacterReceived_s1_agent:m0_waitrequest
	wire   [2:0] characterreceived_s1_agent_m0_burstcount;                                  // CharacterReceived_s1_agent:m0_burstcount -> CharacterReceived_s1_translator:uav_burstcount
	wire  [31:0] characterreceived_s1_agent_m0_writedata;                                   // CharacterReceived_s1_agent:m0_writedata -> CharacterReceived_s1_translator:uav_writedata
	wire  [13:0] characterreceived_s1_agent_m0_address;                                     // CharacterReceived_s1_agent:m0_address -> CharacterReceived_s1_translator:uav_address
	wire         characterreceived_s1_agent_m0_write;                                       // CharacterReceived_s1_agent:m0_write -> CharacterReceived_s1_translator:uav_write
	wire         characterreceived_s1_agent_m0_lock;                                        // CharacterReceived_s1_agent:m0_lock -> CharacterReceived_s1_translator:uav_lock
	wire         characterreceived_s1_agent_m0_read;                                        // CharacterReceived_s1_agent:m0_read -> CharacterReceived_s1_translator:uav_read
	wire  [31:0] characterreceived_s1_agent_m0_readdata;                                    // CharacterReceived_s1_translator:uav_readdata -> CharacterReceived_s1_agent:m0_readdata
	wire         characterreceived_s1_agent_m0_readdatavalid;                               // CharacterReceived_s1_translator:uav_readdatavalid -> CharacterReceived_s1_agent:m0_readdatavalid
	wire         characterreceived_s1_agent_m0_debugaccess;                                 // CharacterReceived_s1_agent:m0_debugaccess -> CharacterReceived_s1_translator:uav_debugaccess
	wire   [3:0] characterreceived_s1_agent_m0_byteenable;                                  // CharacterReceived_s1_agent:m0_byteenable -> CharacterReceived_s1_translator:uav_byteenable
	wire         characterreceived_s1_agent_rf_source_endofpacket;                          // CharacterReceived_s1_agent:rf_source_endofpacket -> CharacterReceived_s1_agent_rsp_fifo:in_endofpacket
	wire         characterreceived_s1_agent_rf_source_valid;                                // CharacterReceived_s1_agent:rf_source_valid -> CharacterReceived_s1_agent_rsp_fifo:in_valid
	wire         characterreceived_s1_agent_rf_source_startofpacket;                        // CharacterReceived_s1_agent:rf_source_startofpacket -> CharacterReceived_s1_agent_rsp_fifo:in_startofpacket
	wire  [92:0] characterreceived_s1_agent_rf_source_data;                                 // CharacterReceived_s1_agent:rf_source_data -> CharacterReceived_s1_agent_rsp_fifo:in_data
	wire         characterreceived_s1_agent_rf_source_ready;                                // CharacterReceived_s1_agent_rsp_fifo:in_ready -> CharacterReceived_s1_agent:rf_source_ready
	wire         characterreceived_s1_agent_rsp_fifo_out_endofpacket;                       // CharacterReceived_s1_agent_rsp_fifo:out_endofpacket -> CharacterReceived_s1_agent:rf_sink_endofpacket
	wire         characterreceived_s1_agent_rsp_fifo_out_valid;                             // CharacterReceived_s1_agent_rsp_fifo:out_valid -> CharacterReceived_s1_agent:rf_sink_valid
	wire         characterreceived_s1_agent_rsp_fifo_out_startofpacket;                     // CharacterReceived_s1_agent_rsp_fifo:out_startofpacket -> CharacterReceived_s1_agent:rf_sink_startofpacket
	wire  [92:0] characterreceived_s1_agent_rsp_fifo_out_data;                              // CharacterReceived_s1_agent_rsp_fifo:out_data -> CharacterReceived_s1_agent:rf_sink_data
	wire         characterreceived_s1_agent_rsp_fifo_out_ready;                             // CharacterReceived_s1_agent:rf_sink_ready -> CharacterReceived_s1_agent_rsp_fifo:out_ready
	wire         characterreceived_s1_agent_rdata_fifo_src_valid;                           // CharacterReceived_s1_agent:rdata_fifo_src_valid -> CharacterReceived_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] characterreceived_s1_agent_rdata_fifo_src_data;                            // CharacterReceived_s1_agent:rdata_fifo_src_data -> CharacterReceived_s1_agent:rdata_fifo_sink_data
	wire         characterreceived_s1_agent_rdata_fifo_src_ready;                           // CharacterReceived_s1_agent:rdata_fifo_sink_ready -> CharacterReceived_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> CharacterReceived_s1_agent:cp_endofpacket
	wire         cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> CharacterReceived_s1_agent:cp_valid
	wire         cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> CharacterReceived_s1_agent:cp_startofpacket
	wire  [91:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> CharacterReceived_s1_agent:cp_data
	wire   [9:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> CharacterReceived_s1_agent:cp_channel
	wire         cmd_mux_009_src_ready;                                                     // CharacterReceived_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire         cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router:sink_valid
	wire         cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [91:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router:sink_data
	wire         cpu_instruction_master_agent_cp_ready;                                     // router:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire         router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire         router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [91:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire   [9:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire         cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire         cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [91:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router_001:sink_data
	wire         cpu_data_master_agent_cp_ready;                                            // router_001:sink_ready -> cpu_data_master_agent:cp_ready
	wire         router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         router_001_src_valid;                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire         router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [91:0] router_001_src_data;                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire   [9:0] router_001_src_channel;                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_ready;                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire         cpu_jtag_debug_module_agent_rp_endofpacket;                                // cpu_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rp_valid;                                      // cpu_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire         cpu_jtag_debug_module_agent_rp_startofpacket;                              // cpu_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [91:0] cpu_jtag_debug_module_agent_rp_data;                                       // cpu_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire         cpu_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire         router_002_src_endofpacket;                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire         router_002_src_startofpacket;                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [91:0] router_002_src_data;                                                       // router_002:src_data -> rsp_demux:sink_data
	wire   [9:0] router_002_src_channel;                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_ready;                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                  // onchip_memory2_0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                        // onchip_memory2_0_s1_agent:rp_valid -> router_003:sink_valid
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                // onchip_memory2_0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [91:0] onchip_memory2_0_s1_agent_rp_data;                                         // onchip_memory2_0_s1_agent:rp_data -> router_003:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                        // router_003:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux_001:sink_valid
	wire         router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [91:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux_001:sink_data
	wire   [9:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_ready;                                                      // rsp_demux_001:sink_ready -> router_003:src_ready
	wire         ledr_s1_agent_rp_endofpacket;                                              // LEDR_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         ledr_s1_agent_rp_valid;                                                    // LEDR_s1_agent:rp_valid -> router_004:sink_valid
	wire         ledr_s1_agent_rp_startofpacket;                                            // LEDR_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [91:0] ledr_s1_agent_rp_data;                                                     // LEDR_s1_agent:rp_data -> router_004:sink_data
	wire         ledr_s1_agent_rp_ready;                                                    // router_004:sink_ready -> LEDR_s1_agent:rp_ready
	wire         router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire         router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [91:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire   [9:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_ready;                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                              // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                      // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [91:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire         jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                              // router_005:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire         router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire         router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [91:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire   [9:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_ready;                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire         paralleltoprocessor_s1_agent_rp_endofpacket;                               // ParallelToProcessor_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         paralleltoprocessor_s1_agent_rp_valid;                                     // ParallelToProcessor_s1_agent:rp_valid -> router_006:sink_valid
	wire         paralleltoprocessor_s1_agent_rp_startofpacket;                             // ParallelToProcessor_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [91:0] paralleltoprocessor_s1_agent_rp_data;                                      // ParallelToProcessor_s1_agent:rp_data -> router_006:sink_data
	wire         paralleltoprocessor_s1_agent_rp_ready;                                     // router_006:sink_ready -> ParallelToProcessor_s1_agent:rp_ready
	wire         router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire         router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [91:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire   [9:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_ready;                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire         parallelfromprocessor_s1_agent_rp_endofpacket;                             // ParallelFromProcessor_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         parallelfromprocessor_s1_agent_rp_valid;                                   // ParallelFromProcessor_s1_agent:rp_valid -> router_007:sink_valid
	wire         parallelfromprocessor_s1_agent_rp_startofpacket;                           // ParallelFromProcessor_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [91:0] parallelfromprocessor_s1_agent_rp_data;                                    // ParallelFromProcessor_s1_agent:rp_data -> router_007:sink_data
	wire         parallelfromprocessor_s1_agent_rp_ready;                                   // router_007:sink_ready -> ParallelFromProcessor_s1_agent:rp_ready
	wire         router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire         router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [91:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire   [9:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_ready;                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire         transmitenable_s1_agent_rp_endofpacket;                                    // TransmitEnable_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         transmitenable_s1_agent_rp_valid;                                          // TransmitEnable_s1_agent:rp_valid -> router_008:sink_valid
	wire         transmitenable_s1_agent_rp_startofpacket;                                  // TransmitEnable_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [91:0] transmitenable_s1_agent_rp_data;                                           // TransmitEnable_s1_agent:rp_data -> router_008:sink_data
	wire         transmitenable_s1_agent_rp_ready;                                          // router_008:sink_ready -> TransmitEnable_s1_agent:rp_ready
	wire         router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire         router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [91:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire   [9:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_ready;                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire         charactersent_s1_agent_rp_endofpacket;                                     // CharacterSent_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         charactersent_s1_agent_rp_valid;                                           // CharacterSent_s1_agent:rp_valid -> router_009:sink_valid
	wire         charactersent_s1_agent_rp_startofpacket;                                   // CharacterSent_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [91:0] charactersent_s1_agent_rp_data;                                            // CharacterSent_s1_agent:rp_data -> router_009:sink_data
	wire         charactersent_s1_agent_rp_ready;                                           // router_009:sink_ready -> CharacterSent_s1_agent:rp_ready
	wire         router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire         router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [91:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire   [9:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_ready;                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire         load_s1_agent_rp_endofpacket;                                              // Load_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         load_s1_agent_rp_valid;                                                    // Load_s1_agent:rp_valid -> router_010:sink_valid
	wire         load_s1_agent_rp_startofpacket;                                            // Load_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [91:0] load_s1_agent_rp_data;                                                     // Load_s1_agent:rp_data -> router_010:sink_data
	wire         load_s1_agent_rp_ready;                                                    // router_010:sink_ready -> Load_s1_agent:rp_ready
	wire         router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire         router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [91:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire   [9:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_ready;                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire         characterreceived_s1_agent_rp_endofpacket;                                 // CharacterReceived_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         characterreceived_s1_agent_rp_valid;                                       // CharacterReceived_s1_agent:rp_valid -> router_011:sink_valid
	wire         characterreceived_s1_agent_rp_startofpacket;                               // CharacterReceived_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [91:0] characterreceived_s1_agent_rp_data;                                        // CharacterReceived_s1_agent:rp_data -> router_011:sink_data
	wire         characterreceived_s1_agent_rp_ready;                                       // router_011:sink_ready -> CharacterReceived_s1_agent:rp_ready
	wire         router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire         router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [91:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire   [9:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_ready;                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire         cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [91:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [9:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [91:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire   [9:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire         cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [91:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire   [9:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire         cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire         cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [91:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire   [9:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_ready;                                                  // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire         cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire   [9:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_001_src2_ready;                                                  // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire         cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire   [9:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_001_src3_ready;                                                  // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire         cmd_demux_001_src4_endofpacket;                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_001_src4_valid;                                                  // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_001_src4_startofpacket;                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src4_data;                                                   // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire   [9:0] cmd_demux_001_src4_channel;                                                // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_001_src4_ready;                                                  // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire         cmd_demux_001_src5_endofpacket;                                            // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_001_src5_valid;                                                  // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire         cmd_demux_001_src5_startofpacket;                                          // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src5_data;                                                   // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire   [9:0] cmd_demux_001_src5_channel;                                                // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_001_src5_ready;                                                  // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire         cmd_demux_001_src6_endofpacket;                                            // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_001_src6_valid;                                                  // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire         cmd_demux_001_src6_startofpacket;                                          // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src6_data;                                                   // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire   [9:0] cmd_demux_001_src6_channel;                                                // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_001_src6_ready;                                                  // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire         cmd_demux_001_src7_endofpacket;                                            // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_001_src7_valid;                                                  // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire         cmd_demux_001_src7_startofpacket;                                          // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src7_data;                                                   // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire   [9:0] cmd_demux_001_src7_channel;                                                // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_001_src7_ready;                                                  // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire         cmd_demux_001_src8_endofpacket;                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_001_src8_valid;                                                  // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire         cmd_demux_001_src8_startofpacket;                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src8_data;                                                   // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire   [9:0] cmd_demux_001_src8_channel;                                                // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_001_src8_ready;                                                  // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire         cmd_demux_001_src9_endofpacket;                                            // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src9_valid;                                                  // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire         cmd_demux_001_src9_startofpacket;                                          // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [91:0] cmd_demux_001_src9_data;                                                   // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire   [9:0] cmd_demux_001_src9_channel;                                                // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_001_src9_ready;                                                  // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire         rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [91:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [9:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire         rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [91:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire   [9:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire         rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [91:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire   [9:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire         rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [91:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire   [9:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire         rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire         rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [91:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire   [9:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_002_src0_ready;                                                  // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire         rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [91:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire   [9:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire         rsp_demux_003_src0_ready;                                                  // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire         rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [91:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire   [9:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_004_src0_ready;                                                  // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire         rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire         rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire         rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [91:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire   [9:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire         rsp_demux_005_src0_ready;                                                  // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire         rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire         rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire         rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [91:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire   [9:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire         rsp_demux_006_src0_ready;                                                  // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire         rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire         rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire         rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [91:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire   [9:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire         rsp_demux_007_src0_ready;                                                  // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire         rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire         rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire         rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [91:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire   [9:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire         rsp_demux_008_src0_ready;                                                  // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire         rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire         rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire         rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire  [91:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire   [9:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire         rsp_demux_009_src0_ready;                                                  // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                      (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (cpu_instruction_master_read),                                               //                          .read
		.av_readdata              (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_readdatavalid         (),                                                                          //               (terminated)
		.av_write                 (1'b0),                                                                      //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_data_master_translator (
		.clk                      (clk_0_clk_clk),                                                      //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (cpu_data_master_read),                                               //                          .read
		.av_readdata              (cpu_data_master_readdata),                                           //                          .readdata
		.av_write                 (cpu_data_master_write),                                              //                          .write
		.av_writedata             (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_readdatavalid         (),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                      (clk_0_clk_clk),                                //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                  (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata              (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                      (clk_0_clk_clk),                              //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address              (onchip_memory2_0_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory2_0_s1_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory2_0_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory2_0_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory2_0_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory2_0_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory2_0_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_0_s1_write),                  //                         .write
		.av_readdata              (onchip_memory2_0_s1_readdata),               //                         .readdata
		.av_writedata             (onchip_memory2_0_s1_writedata),              //                         .writedata
		.av_byteenable            (onchip_memory2_0_s1_byteenable),             //                         .byteenable
		.av_chipselect            (onchip_memory2_0_s1_chipselect),             //                         .chipselect
		.av_clken                 (onchip_memory2_0_s1_clken),                  //                         .clken
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ledr_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (ledr_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (ledr_s1_agent_m0_read),                   //                         .read
		.uav_write                (ledr_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (ledr_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (ledr_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (ledr_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (ledr_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (ledr_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (ledr_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (ledr_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (LEDR_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (LEDR_s1_write),                           //                         .write
		.av_readdata              (LEDR_s1_readdata),                        //                         .readdata
		.av_writedata             (LEDR_s1_writedata),                       //                         .writedata
		.av_chipselect            (LEDR_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                        //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                     //              (terminated)
		.av_burstcount            (),                                                     //              (terminated)
		.av_byteenable            (),                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                 //              (terminated)
		.av_writebyteenable       (),                                                     //              (terminated)
		.av_lock                  (),                                                     //              (terminated)
		.av_clken                 (),                                                     //              (terminated)
		.uav_clken                (1'b0),                                                 //              (terminated)
		.av_debugaccess           (),                                                     //              (terminated)
		.av_outputenable          (),                                                     //              (terminated)
		.uav_response             (),                                                     //              (terminated)
		.av_response              (2'b00),                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                     //              (terminated)
		.av_writeresponserequest  (),                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) paralleltoprocessor_s1_translator (
		.clk                      (clk_0_clk_clk),                                 //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address              (paralleltoprocessor_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (paralleltoprocessor_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (paralleltoprocessor_s1_agent_m0_read),          //                         .read
		.uav_write                (paralleltoprocessor_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (paralleltoprocessor_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (paralleltoprocessor_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (paralleltoprocessor_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (paralleltoprocessor_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (paralleltoprocessor_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (paralleltoprocessor_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (paralleltoprocessor_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ParallelToProcessor_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (ParallelToProcessor_s1_readdata),               //                         .readdata
		.av_write                 (),                                              //              (terminated)
		.av_read                  (),                                              //              (terminated)
		.av_writedata             (),                                              //              (terminated)
		.av_begintransfer         (),                                              //              (terminated)
		.av_beginbursttransfer    (),                                              //              (terminated)
		.av_burstcount            (),                                              //              (terminated)
		.av_byteenable            (),                                              //              (terminated)
		.av_readdatavalid         (1'b0),                                          //              (terminated)
		.av_waitrequest           (1'b0),                                          //              (terminated)
		.av_writebyteenable       (),                                              //              (terminated)
		.av_lock                  (),                                              //              (terminated)
		.av_chipselect            (),                                              //              (terminated)
		.av_clken                 (),                                              //              (terminated)
		.uav_clken                (1'b0),                                          //              (terminated)
		.av_debugaccess           (),                                              //              (terminated)
		.av_outputenable          (),                                              //              (terminated)
		.uav_response             (),                                              //              (terminated)
		.av_response              (2'b00),                                         //              (terminated)
		.uav_writeresponserequest (1'b0),                                          //              (terminated)
		.uav_writeresponsevalid   (),                                              //              (terminated)
		.av_writeresponserequest  (),                                              //              (terminated)
		.av_writeresponsevalid    (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parallelfromprocessor_s1_translator (
		.clk                      (clk_0_clk_clk),                                   //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (parallelfromprocessor_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (parallelfromprocessor_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (parallelfromprocessor_s1_agent_m0_read),          //                         .read
		.uav_write                (parallelfromprocessor_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (parallelfromprocessor_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (parallelfromprocessor_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (parallelfromprocessor_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (parallelfromprocessor_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (parallelfromprocessor_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (parallelfromprocessor_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (parallelfromprocessor_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ParallelFromProcessor_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (ParallelFromProcessor_s1_write),                  //                         .write
		.av_readdata              (ParallelFromProcessor_s1_readdata),               //                         .readdata
		.av_writedata             (ParallelFromProcessor_s1_writedata),              //                         .writedata
		.av_chipselect            (ParallelFromProcessor_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                                //              (terminated)
		.av_begintransfer         (),                                                //              (terminated)
		.av_beginbursttransfer    (),                                                //              (terminated)
		.av_burstcount            (),                                                //              (terminated)
		.av_byteenable            (),                                                //              (terminated)
		.av_readdatavalid         (1'b0),                                            //              (terminated)
		.av_waitrequest           (1'b0),                                            //              (terminated)
		.av_writebyteenable       (),                                                //              (terminated)
		.av_lock                  (),                                                //              (terminated)
		.av_clken                 (),                                                //              (terminated)
		.uav_clken                (1'b0),                                            //              (terminated)
		.av_debugaccess           (),                                                //              (terminated)
		.av_outputenable          (),                                                //              (terminated)
		.uav_response             (),                                                //              (terminated)
		.av_response              (2'b00),                                           //              (terminated)
		.uav_writeresponserequest (1'b0),                                            //              (terminated)
		.uav_writeresponsevalid   (),                                                //              (terminated)
		.av_writeresponserequest  (),                                                //              (terminated)
		.av_writeresponsevalid    (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) transmitenable_s1_translator (
		.clk                      (clk_0_clk_clk),                            //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (transmitenable_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (transmitenable_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (transmitenable_s1_agent_m0_read),          //                         .read
		.uav_write                (transmitenable_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (transmitenable_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (transmitenable_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (transmitenable_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (transmitenable_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (transmitenable_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (transmitenable_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (transmitenable_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (TransmitEnable_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (TransmitEnable_s1_write),                  //                         .write
		.av_readdata              (TransmitEnable_s1_readdata),               //                         .readdata
		.av_writedata             (TransmitEnable_s1_writedata),              //                         .writedata
		.av_chipselect            (TransmitEnable_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                         //              (terminated)
		.av_begintransfer         (),                                         //              (terminated)
		.av_beginbursttransfer    (),                                         //              (terminated)
		.av_burstcount            (),                                         //              (terminated)
		.av_byteenable            (),                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                     //              (terminated)
		.av_waitrequest           (1'b0),                                     //              (terminated)
		.av_writebyteenable       (),                                         //              (terminated)
		.av_lock                  (),                                         //              (terminated)
		.av_clken                 (),                                         //              (terminated)
		.uav_clken                (1'b0),                                     //              (terminated)
		.av_debugaccess           (),                                         //              (terminated)
		.av_outputenable          (),                                         //              (terminated)
		.uav_response             (),                                         //              (terminated)
		.av_response              (2'b00),                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                     //              (terminated)
		.uav_writeresponsevalid   (),                                         //              (terminated)
		.av_writeresponserequest  (),                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) charactersent_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (charactersent_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (charactersent_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (charactersent_s1_agent_m0_read),          //                         .read
		.uav_write                (charactersent_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (charactersent_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (charactersent_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (charactersent_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (charactersent_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (charactersent_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (charactersent_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (charactersent_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (CharacterSent_s1_address),                //      avalon_anti_slave_0.address
		.av_write                 (CharacterSent_s1_write),                  //                         .write
		.av_readdata              (CharacterSent_s1_readdata),               //                         .readdata
		.av_writedata             (CharacterSent_s1_writedata),              //                         .writedata
		.av_chipselect            (CharacterSent_s1_chipselect),             //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) load_s1_translator (
		.clk                      (clk_0_clk_clk),                           //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (load_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (load_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (load_s1_agent_m0_read),                   //                         .read
		.uav_write                (load_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (load_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (load_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (load_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (load_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (load_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (load_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (load_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (Load_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (Load_s1_write),                           //                         .write
		.av_readdata              (Load_s1_readdata),                        //                         .readdata
		.av_writedata             (Load_s1_writedata),                       //                         .writedata
		.av_chipselect            (Load_s1_chipselect),                      //                         .chipselect
		.av_read                  (),                                        //              (terminated)
		.av_begintransfer         (),                                        //              (terminated)
		.av_beginbursttransfer    (),                                        //              (terminated)
		.av_burstcount            (),                                        //              (terminated)
		.av_byteenable            (),                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                    //              (terminated)
		.av_waitrequest           (1'b0),                                    //              (terminated)
		.av_writebyteenable       (),                                        //              (terminated)
		.av_lock                  (),                                        //              (terminated)
		.av_clken                 (),                                        //              (terminated)
		.uav_clken                (1'b0),                                    //              (terminated)
		.av_debugaccess           (),                                        //              (terminated)
		.av_outputenable          (),                                        //              (terminated)
		.uav_response             (),                                        //              (terminated)
		.av_response              (2'b00),                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                    //              (terminated)
		.uav_writeresponsevalid   (),                                        //              (terminated)
		.av_writeresponserequest  (),                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) characterreceived_s1_translator (
		.clk                      (clk_0_clk_clk),                               //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address              (characterreceived_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (characterreceived_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (characterreceived_s1_agent_m0_read),          //                         .read
		.uav_write                (characterreceived_s1_agent_m0_write),         //                         .write
		.uav_waitrequest          (characterreceived_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (characterreceived_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (characterreceived_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (characterreceived_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (characterreceived_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (characterreceived_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (characterreceived_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (CharacterReceived_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata              (CharacterReceived_s1_readdata),               //                         .readdata
		.av_write                 (),                                            //              (terminated)
		.av_read                  (),                                            //              (terminated)
		.av_writedata             (),                                            //              (terminated)
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_chipselect            (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                     (clk_0_clk_clk),                                                             //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                          //          .data
		.rp_channel              (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                         //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                     (clk_0_clk_clk),                                                      //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_001_src_valid),                                              //        rp.valid
		.rp_data                 (rsp_mux_001_src_data),                                               //          .data
		.rp_channel              (rsp_mux_001_src_channel),                                            //          .channel
		.rp_startofpacket        (rsp_mux_001_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket          (rsp_mux_001_src_endofpacket),                                        //          .endofpacket
		.rp_ready                (rsp_mux_001_src_ready),                                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ledr_s1_agent (
		.clk                     (clk_0_clk_clk),                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_002_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                  //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ledr_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ledr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ledr_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponserequest (),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                        //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) paralleltoprocessor_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (paralleltoprocessor_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (paralleltoprocessor_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (paralleltoprocessor_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (paralleltoprocessor_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (paralleltoprocessor_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (paralleltoprocessor_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (paralleltoprocessor_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (paralleltoprocessor_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (paralleltoprocessor_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (paralleltoprocessor_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (paralleltoprocessor_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (paralleltoprocessor_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (paralleltoprocessor_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (paralleltoprocessor_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (paralleltoprocessor_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (paralleltoprocessor_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                 //                .channel
		.rf_sink_ready           (paralleltoprocessor_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (paralleltoprocessor_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (paralleltoprocessor_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (paralleltoprocessor_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (paralleltoprocessor_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (paralleltoprocessor_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (paralleltoprocessor_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (paralleltoprocessor_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (paralleltoprocessor_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (paralleltoprocessor_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (paralleltoprocessor_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (paralleltoprocessor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (paralleltoprocessor_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (paralleltoprocessor_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (paralleltoprocessor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (paralleltoprocessor_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponserequest (),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) paralleltoprocessor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (paralleltoprocessor_s1_agent_rf_source_data),             //        in.data
		.in_valid          (paralleltoprocessor_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (paralleltoprocessor_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (paralleltoprocessor_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (paralleltoprocessor_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (paralleltoprocessor_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (paralleltoprocessor_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (paralleltoprocessor_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (paralleltoprocessor_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (paralleltoprocessor_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) parallelfromprocessor_s1_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (parallelfromprocessor_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (parallelfromprocessor_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (parallelfromprocessor_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (parallelfromprocessor_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (parallelfromprocessor_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (parallelfromprocessor_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (parallelfromprocessor_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (parallelfromprocessor_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (parallelfromprocessor_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (parallelfromprocessor_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (parallelfromprocessor_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (parallelfromprocessor_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (parallelfromprocessor_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (parallelfromprocessor_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (parallelfromprocessor_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (parallelfromprocessor_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (parallelfromprocessor_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (parallelfromprocessor_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (parallelfromprocessor_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (parallelfromprocessor_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (parallelfromprocessor_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (parallelfromprocessor_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (parallelfromprocessor_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (parallelfromprocessor_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (parallelfromprocessor_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (parallelfromprocessor_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (parallelfromprocessor_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (parallelfromprocessor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (parallelfromprocessor_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (parallelfromprocessor_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parallelfromprocessor_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (parallelfromprocessor_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parallelfromprocessor_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (parallelfromprocessor_s1_agent_rf_source_data),             //        in.data
		.in_valid          (parallelfromprocessor_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (parallelfromprocessor_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parallelfromprocessor_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parallelfromprocessor_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parallelfromprocessor_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parallelfromprocessor_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parallelfromprocessor_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parallelfromprocessor_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parallelfromprocessor_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) transmitenable_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (transmitenable_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (transmitenable_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (transmitenable_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (transmitenable_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (transmitenable_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (transmitenable_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (transmitenable_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (transmitenable_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (transmitenable_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (transmitenable_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (transmitenable_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (transmitenable_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (transmitenable_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (transmitenable_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (transmitenable_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (transmitenable_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (transmitenable_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (transmitenable_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (transmitenable_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (transmitenable_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (transmitenable_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (transmitenable_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (transmitenable_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (transmitenable_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (transmitenable_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (transmitenable_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (transmitenable_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (transmitenable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (transmitenable_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (transmitenable_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (transmitenable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (transmitenable_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) transmitenable_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (transmitenable_s1_agent_rf_source_data),             //        in.data
		.in_valid          (transmitenable_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (transmitenable_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (transmitenable_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (transmitenable_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (transmitenable_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (transmitenable_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (transmitenable_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (transmitenable_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (transmitenable_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) charactersent_s1_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (charactersent_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (charactersent_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (charactersent_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (charactersent_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (charactersent_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (charactersent_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (charactersent_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (charactersent_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (charactersent_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (charactersent_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (charactersent_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (charactersent_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (charactersent_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (charactersent_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (charactersent_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (charactersent_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                           //                .channel
		.rf_sink_ready           (charactersent_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (charactersent_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (charactersent_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (charactersent_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (charactersent_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (charactersent_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (charactersent_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (charactersent_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (charactersent_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (charactersent_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (charactersent_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (charactersent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (charactersent_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (charactersent_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (charactersent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (charactersent_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) charactersent_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (charactersent_s1_agent_rf_source_data),             //        in.data
		.in_valid          (charactersent_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (charactersent_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (charactersent_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (charactersent_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (charactersent_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (charactersent_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (charactersent_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (charactersent_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (charactersent_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) load_s1_agent (
		.clk                     (clk_0_clk_clk),                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (load_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (load_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (load_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (load_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (load_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (load_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (load_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (load_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (load_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (load_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (load_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (load_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (load_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (load_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (load_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (load_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_008_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                  //                .channel
		.rf_sink_ready           (load_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (load_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (load_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (load_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (load_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (load_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (load_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (load_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (load_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (load_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (load_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (load_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (load_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (load_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (load_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (load_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponserequest (),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) load_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (load_s1_agent_rf_source_data),             //        in.data
		.in_valid          (load_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (load_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (load_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (load_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (load_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (load_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (load_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (load_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (load_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) characterreceived_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (characterreceived_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (characterreceived_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (characterreceived_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (characterreceived_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (characterreceived_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (characterreceived_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (characterreceived_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (characterreceived_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (characterreceived_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (characterreceived_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (characterreceived_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (characterreceived_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (characterreceived_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (characterreceived_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (characterreceived_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (characterreceived_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                               //                .channel
		.rf_sink_ready           (characterreceived_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (characterreceived_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (characterreceived_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (characterreceived_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (characterreceived_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (characterreceived_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (characterreceived_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (characterreceived_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (characterreceived_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (characterreceived_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (characterreceived_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (characterreceived_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (characterreceived_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (characterreceived_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (characterreceived_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (characterreceived_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) characterreceived_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (characterreceived_s1_agent_rf_source_data),             //        in.data
		.in_valid          (characterreceived_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (characterreceived_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (characterreceived_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (characterreceived_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (characterreceived_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (characterreceived_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (characterreceived_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (characterreceived_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (characterreceived_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                       //       src.ready
		.src_valid          (router_003_src_valid),                       //          .valid
		.src_data           (router_003_src_data),                        //          .data
		.src_channel        (router_003_src_channel),                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (ledr_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ledr_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ledr_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ledr_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ledr_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                    //       src.ready
		.src_valid          (router_004_src_valid),                    //          .valid
		.src_data           (router_004_src_data),                     //          .data
		.src_channel        (router_004_src_channel),                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (paralleltoprocessor_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (paralleltoprocessor_s1_agent_rp_valid),         //          .valid
		.sink_data          (paralleltoprocessor_s1_agent_rp_data),          //          .data
		.sink_startofpacket (paralleltoprocessor_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (paralleltoprocessor_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_006_src_ready),                          //       src.ready
		.src_valid          (router_006_src_valid),                          //          .valid
		.src_data           (router_006_src_data),                           //          .data
		.src_channel        (router_006_src_channel),                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (parallelfromprocessor_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (parallelfromprocessor_s1_agent_rp_valid),         //          .valid
		.sink_data          (parallelfromprocessor_s1_agent_rp_data),          //          .data
		.sink_startofpacket (parallelfromprocessor_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (parallelfromprocessor_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_007_src_ready),                            //       src.ready
		.src_valid          (router_007_src_valid),                            //          .valid
		.src_data           (router_007_src_data),                             //          .data
		.src_channel        (router_007_src_channel),                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (transmitenable_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (transmitenable_s1_agent_rp_valid),         //          .valid
		.sink_data          (transmitenable_s1_agent_rp_data),          //          .data
		.sink_startofpacket (transmitenable_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (transmitenable_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (charactersent_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (charactersent_s1_agent_rp_valid),         //          .valid
		.sink_data          (charactersent_s1_agent_rp_data),          //          .data
		.sink_startofpacket (charactersent_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (charactersent_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (load_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (load_s1_agent_rp_valid),                  //          .valid
		.sink_data          (load_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (load_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (load_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                    //       src.ready
		.src_valid          (router_010_src_valid),                    //          .valid
		.src_data           (router_010_src_data),                     //          .data
		.src_channel        (router_010_src_channel),                  //          .channel
		.src_startofpacket  (router_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (characterreceived_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (characterreceived_s1_agent_rp_valid),         //          .valid
		.sink_data          (characterreceived_s1_agent_rp_data),          //          .data
		.sink_startofpacket (characterreceived_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (characterreceived_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_011_src_ready),                        //       src.ready
		.src_valid          (router_011_src_valid),                        //          .valid
		.src_data           (router_011_src_data),                         //          .data
		.src_channel        (router_011_src_channel),                      //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                   //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                        //      sink.ready
		.sink_channel       (router_src_channel),                      //          .channel
		.sink_data          (router_src_data),                         //          .data
		.sink_startofpacket (router_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_src_valid),                        //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_src1_data),                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                    //      sink.ready
		.sink_channel       (router_001_src_channel),                  //          .channel
		.sink_data          (router_001_src_data),                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_001_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                //          .valid
		.src0_data          (cmd_demux_001_src0_data),                 //          .data
		.src0_channel       (cmd_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.src1_data          (cmd_demux_001_src1_data),                 //          .data
		.src1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                //          .valid
		.src2_data          (cmd_demux_001_src2_data),                 //          .data
		.src2_channel       (cmd_demux_001_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                //          .valid
		.src3_data          (cmd_demux_001_src3_data),                 //          .data
		.src3_channel       (cmd_demux_001_src3_channel),              //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                //          .valid
		.src4_data          (cmd_demux_001_src4_data),                 //          .data
		.src4_channel       (cmd_demux_001_src4_channel),              //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                //      src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                //          .valid
		.src5_data          (cmd_demux_001_src5_data),                 //          .data
		.src5_channel       (cmd_demux_001_src5_channel),              //          .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),          //          .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                //      src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                //          .valid
		.src6_data          (cmd_demux_001_src6_data),                 //          .data
		.src6_channel       (cmd_demux_001_src6_channel),              //          .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),          //          .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                //      src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                //          .valid
		.src7_data          (cmd_demux_001_src7_data),                 //          .data
		.src7_channel       (cmd_demux_001_src7_channel),              //          .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),          //          .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                //      src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                //          .valid
		.src8_data          (cmd_demux_001_src8_data),                 //          .data
		.src8_channel       (cmd_demux_001_src8_channel),              //          .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket),          //          .endofpacket
		.src9_ready         (cmd_demux_001_src9_ready),                //      src9.ready
		.src9_valid         (cmd_demux_001_src9_valid),                //          .valid
		.src9_data          (cmd_demux_001_src9_data),                 //          .data
		.src9_channel       (cmd_demux_001_src9_channel),              //          .channel
		.src9_startofpacket (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket   (cmd_demux_001_src9_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),              //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                 //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),              //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),              //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                 //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),              //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                 //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),              //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                 //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),              //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                 //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),              //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                 //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),              //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                 //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

endmodule
